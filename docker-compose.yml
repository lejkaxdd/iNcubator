version: '3'

services:
  internal-gateway:
    build:
       context: ./internalGateway
       dockerfile: Dockerfile
    container_name: internal-gateway
    hostname: internalGateway
    command: python3 main.py
    environment:
    - PYTHONUNBUFFERED=1 
    volumes:
      - ./internalGateway:/app
    ports:
      - 80:8080
    restart: always
    depends_on:
      - kafka-service
      - kafka-integration-service
      - cloud-gateway
      - cms-service
      - subscription-service
    networks:
    - infrastructure-network-sg1
  
  cloud-gateway:
    build:
      context: ./cloudGateway
      dockerfile: Dockerfile
    container_name: cloud-gateway
    hostname: cloud-gateway
    command: python3 main.py
    volumes:
      - ./cloudGateway/:/app
    environment:
    - PYTHONUNBUFFERED=1
    ports:
      - 9000:9000
    restart: always
    depends_on:
      - kafka-service
    networks:
      - cloud-network
      - infrastructure-network-sg0

  subscription-service:
    build:
      context: ./subscriptionService
      dockerfile: Dockerfile
    container_name: subscription-service
    hostname: subscriptionService
    volumes:
      - ./subscriptionService/:/app
    command: python3 main.py 
    expose:
      - "8083"
    restart: always
    depends_on:
      - kafka-service
    environment:
    - PYTHONUNBUFFERED=1 
    networks:
      - infrastructure-network-sg0
      - infrastructure-network-sg1

  cms-service:
    build:
      context: ./cmsService
      dockerfile: Dockerfile
    container_name: cms-service
    hostname: cms-service
    volumes:
      - ./cmsService/:/app
    command: python3 main.py
    ports:
      - 9090:9090
    restart: always 
    depends_on:
      - cloud-gateway
    networks:
      - cloud-network


  kafka-integration-service:
    build:
      context: ./kafkaIntegrationService
      dockerfile: Dockerfile
    container_name: kis
    hostname: kis
    volumes:
      - ./kafkaIntegrationService/:/app
    command: python3 kafka.py
    restart: always
    depends_on:
      - kafka-service
    networks:
      - infrastructure-network-sg0
    

  kafka-service:
    user: "0:0"
    container_name: kafka-service
    hostname: kafka-service
    image: confluentinc/cp-kafka:7.2.1
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENERS=PLAINTEXT://kafka-service:9092,CONTROLLER://:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-service:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-service:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - BITNAMI_DEBUG=true
    volumes:
      - ./kafkaService/data/kafka/data:/var/lib/kafka/data
      - ./kafkaService/kraftfix.sh:/tmp/kraftfix.sh
    command: "bash -c '/tmp/kraftfix.sh && /etc/confluent/docker/run'"
    expose:  
      - "9092"
    restart: always
    networks:
      - infrastructure-network-sg0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic subscription --describe"]
      interval: 2s
      timeout: 2s
      retries: 15
   


    

networks:
  cloud-network:
    # name: cloudNetwork
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.1.0/24
  
  infrastructure-network-sg0: 
    # name: infrastructureNetwork-segment0 
    driver: bridge
    ipam:
      config:
        - subnet: 10.20.1.0/24

  infrastructure-network-sg1:
    # name: infrastructureNetwork-segment1
    driver: bridge
    ipam:
      config:
        - subnet: 10.30.1.0/24
